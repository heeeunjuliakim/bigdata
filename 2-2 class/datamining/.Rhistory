setwd("C:/Users/hehe2/Desktop/데이터마이닝/0910")
setwd
setwd("d:/datamining")
setwd("C:/Users/hehe2/Desktop/datamining")
# Data Preparation
setwd("d:/datamining")
train <- read.csv("pepTrainSet.csv", stringsAsFactors=F)
setwd("C:/Users/hehe2/Desktop/datamining/0910")
train <- read.csv("pepTrainSet.csv", stringsAsFactors=F)
train <- subset(train, select=-c(id))
test <- read.csv("pepTestSet.csv", stringsAsFactors=F)
newd <- read.csv("pepNewCustomers.csv", stringsAsFactors=F)
head(train)
head(test)
head(newd)
train$pep <- factor(train$pep)
test$pep <- factor(test$pep)
train$pep
test$pep
install.packages("caret")
install.packages("ROCR")
install.packages("C50")
library(caret)
library(ROCR)
library(C50)
install.packages("e1071")
library(e1071)
c5_options <- C5.0Control(winnow = FALSE, noGlobalPruning = FALSE)
c5_model <- C5.0(pep ~ ., data=train, control=c5_options, rules=FALSE)   #pep
summary(c5_model)
plot(c5_model)
lm_model <- glm(pep ~ ., data=train, family = binomial)
lm_model
summary(lm_model)
window()
windows()
plot(c5_model)
summary(lm_model)
test$c5_pred <- predict(c5_model, test, type="class")
test$c5_pred_prob <- predict(c5_model, test, type="prob")
confusionMatrix(test$c5_pred, test$pep)
test$lm_pred <- ifelse(predict(lm_model, test, type="response") > 0.5, "YES", "NO")
test$lm_pred_prob <- predict(lm_model, test, type="response")
confusionMatrix(test$lm_pred, test$pep)
head(test)
c5_pred <- prediction(test$c5_pred_prob[, "YES"], test$pep)
c5_model.perf <- performance(c5_pred, "tpr", "fpr")
lm_pred <- prediction(test$lm_pred_prob, test$pep)
lm_model.perf <- performance(lm_pred, "tpr", "fpr")
plot(c5_model.perf, col="red")
plot(lm_model.perf, col="blue", add=T)
legend(0.7, 0.7, c("C5","LM"), cex=0.9, col=c("red", "blue"), lty=1)
newd$c5_pred <- predict(c5_model, newd, type="class")
newd$c5_pred_prob <- predict(c5_model, newd, type="prob")
target <- subset(newd, c5_pred=="YES" & c5_pred_prob[ ,"YES"] > 0.8)
write.csv(target[order(target$c5_pred_prob[,"YES"], decreasing=T), ], "dm_target.csv", row.names=FALSE)
newd$c5_pred_prob
target
install.packages("dplyr")
library(dplyr)
read.csv("exam1.csv")
setwd("~/KMU/2학기/datamining/0924")
read.csv("exam1.csv")
exam1 <- read.csv("exam1.csv")
filter(exam1, Exam2 >= 1 & Quiz < 3.9)
filter(exam1, Exam2 >= 1, Quiz < 3.9)
str(exam1)
app <- c(6,3,5,1.5,3.5)
rbind(exam1, app)
rbind(exam1, app)
app2 <- c(6,1)
rbind(exam1, app2)
exam <- read.csv("exam1.csv")
head(exam1)
exam1 <- exam[,5]
filter(exam1, Exam2 >= 1 & Quiz < 3.9)
exam1 <- exam[,5]
head(exam1)
exam1 <- exam[,-5]
head(exam1)
filter(exam1, Exam2 >= 1 & Quiz < 3.9)
filter(exam1, Exam2 >= 1, Quiz < 3.9)
str(exam1)
app <- c(6,3,5,1.5,3.5)
rbind(exam1, app)
app2 <- c(6,1)
rbind(exam1, app2)
arrange(exam1, Quiz)
sample_n(exam1, 3)      # 전체 중에 3개를 random sampling / seed 없으므로 매번 바뀜
sample_frac(exam1, 0.4) # 전체 중에 40%를 random sampling
exam1[as.logical((1:nrow(exam1))%%2),]
exam3 <- read.csv("exam1.csv")
by_gender <- group_by(exam3, Gender)
summarize(by_gender, exam1=mean(Exam1), quiz=median(Quiz))
read.table("dataCustomers.tab", sep="\t", header=T, stringsAsFactors = F)
read.table("dataTransactions.tab", sep="\t", header=T, stringsAsFactors = F)
filter(cs, age>=50&age<=59&gender=="du"&marriage=="기혼")
group_by(cs, gender) %>%
summarise(age=mean(age))
read.table("dataCustomers.tab", sep="\t", header=T, stringsAsFactors = F)
distinct(cs, residence)
cs <- read.table("dataCustomers.tab", sep="\t", header=T, stringsAsFactors = F)
distinct(cs, residence)
group_by(cs, gender) %>%
summarise(age=mean(age))
mg <- merge(cs, tr)
tr <- read.table("dataTransactions.tab", sep="\t", header=T, stringsAsFactors = F)
mg <- merge(cs, tr)
head(mg)
summarise_each(mg, gender, median, max)
mg %<%
group_by(gender) %>%
summarise_each(funs(min, median, max), ammount)
mg %<%
group_by(gender) %>%
summarise_each(funs(min, median, max), amount)
head(mg)
group_by(tr, custid) %>%
summarise(amount=sum(amount)) %>%
arrange(desc(amount)) %>%
head(10)
group_by(gender) %>%
summarise_each(funs(min, median, max), amount)  #?
install.packages("dplyr")
library(dplyr)
exam <- read.csv("exam1.csv")
exam <- read.csv("exam1.csv")
setwd("~/KMU/2-2 class/datamining/0924")
exam <- read.csv("exam1.csv")
head(exam1)
head(exam)
exam1 <- exam[,-5]
head(exam1)
filter(exam1, Exam2>=1&Quiz<3.9)
filter(exam1, Exam2>=1, Quiz<3.9)
mean(Exam1)
mean(exam1$Exam1)
filter(exam1, Exam1>mean(exam1$Exam1) & Exam2>mean(exam1$Exam2))
str(exam1)
app <- c(6,3.5,1.5,3.5)
rbine(exam1, app)
app <- c(6,1)
rbine(exam1, app)
app <- c(6,3.5,1.5,3.5)
rbind(exam1, app)
rbind(exam1, app)  #ID 6의 data rbind함수로 추가
app <- c(6,1)
rbind(exam1, app)  #ID 6의 data rbind함수로 추가
rbind(exam1, app)  #ID 6의 data rbind함수로 추가
app <- c(6,3.5,1.5,3.5)
rbind(exam1, app)  #ID 6의 data rbind함수로 추가
arrange(exam1, Quiz)
arrange(exam1, Quiz, desc())
arrange(exam1, desc(Quiz))
arrange(exam1, Quiz)  #default값
arrange(exam1, (Quiz,Exam1))
arrange(exam1, (Quiz, Exam1))
arrange(exam1, (Quiz&Exam1))
arrange(exam1, (Quiz&Exam1)) #Quiz와 Exam1 순서로 오름차순 ???
arrange(exam1, Quiz     )  #arrange default값 오름차순
arrange(exam1, (Exam1&Quiz))
?sample_n
sample_n(exam1, 3)
sample_n(exam1, 3)
?seed
?sample_franc
?sample_frac
sample_frac(exam1, 0.4)
exam1
5*0.4
5*0.5
5*0.6
sample_frac(exam1, 0.6)
sample_frac(exam1, 0.4)
5%%2
5%%3
5%%1
exam1[as.logical((1:nrow(exam1))%%2,]    #a%%b : a를 b로 나눈 나머지값
exam1[as.logical((1:nrow(exam1))%%2,]    #a%%b : a를 b로 나눈 나머지값
exam1
exam1[as.logical((1:nrow(exam1))%%2,)]
exam1[as.logical((1:nrow(exam1))%%2),]    #a%%b : a를 b로 나눈 나머지값
str(exam1)
exam1
app <- c(6,3.5,1.5,3.5)
rbind(exam1, app)  #ID 6의 data rbind함수로 추가
sample_n(exam1, 3)      #데이터에서 3개의 샘플을 무작위로 추출하라
sample_frac(exam1, 0.4) #데이터에서 전체의 40%의 샘플을 추출하라
exam1[as.logical((1:nrow(exam1))%%2),]    #a%%b : a를 b로 나눈 나머지값
exam1
exam1
exam1[as.logical((1:nrow(exam1))%%2),]    #a%%b : a를 b로 나눈 나머지값
as.logical(3)
exam1[T]
exam1[3]
exam1[3,]
exam1[as.logical((1:nrow(exam1))%%2),]    #a%%b : a를 b로 나눈 나머지값
(1:5)%%2
(1:5)%%2
as.logical((1:5)%%2)
exam1[as.logical((1:nrow(exam1))%%2),]    #a%%b : a를 b로 나눈 나머지값
?read.table
exam3 <- read.table(file="clipboard", sep="\t", headter=t)
setwd("~/KMU/2-2 class/datamining/0924")
exam3 <- read.table(file="clipboard", sep="\t", headter=t)
exam
exam3 <- read.csv("exam1.csv")
exam3
group_by((exam3, Gender))
group_by((exam3, Gender))
by_gender <- group_by((exam3, Gender))
exam3 <- read.csv("exam1.csv")
by_gender <- group_by(exam3, Gender)
by_gender
summarise(by_gender, exam1=mean(Exam1), quiz=median(Quiz))
exam3 %>%
group_by(Gender) %>%
summarise_each(fun(min, max), Exam1, Exam2, Quiz)
exam3 %>%
group_by(Gender) %>%
summarise_each(funs(min, max), Exam1, Exam2, Quiz)
by_gender <- group_by(exam3, Gender)
summarise(by_gender, exam1=mean(Exam1), quiz=median(Quiz))
exam3 %>%
group_by(Gender) %>%
summarise_each(funs(min, max), Exam1, Exam2, Quiz)
a <- exam3 %>%
group_by(Gender) %>%
summarise_each(funs(min, max), Exam1, Exam2, Quiz)
plot(a)
boxplot(a)
exam3 %>%
group_by(Gender) %>%
summarise_each(funs(min, max), Exam1, Exam2, Quiz)
filter(exam1, !duplicated(Quiz))
filter(exam1, duplicated(Quiz))
?duplicated
distinct(exam1, Quiz)
exam1 <- mutate(exam1, ExamSum=Exam1+Exam2, ExamMean=ExamSum/2)
exam1
select(exam1, ID:Exam2)
select(exam1, ID:Exam1)
select(exam1, ID:Exam2)
exam1 <- select(exam1, -ExamSum, -ExamMean)
exam1
rename(exam1, id=ID, quiz=Quiz, ex1=exam1, ex2=exam2)
rename(exam1, id=ID, quiz=Quiz, ex1=Exam1, ex2=Exam2)
select(exam1, ID, Quiz, Exam1, Exam2)
exam1$Extra <- c(1,1,NA,NA,2)
exam1
exam1$Extra[is.na(exam1$Extra)] <- 0
exam1
